# -*- coding: utf-8 -*-
##############################################################################

'''
'''

##############################################################################
# Imports


import inspect
import unittest

from analysis_engine import velocity_speed
from analysis_engine.velocity_speed import VelocitySpeed


##############################################################################
# Decorators


def _generate_tests(generator):
    '''
    A class decorator to generate test cases.
    '''

    def class_decorator(cls):
        '''
        Adds tests to ``cls`` generated by ``generator()``.
        '''
        for f, name, obj in generator():
            test = lambda self, obj=obj, f=f: f(self, obj)
            test.__name__ = 'test__%s' % name
            setattr(cls, test.__name__, test)
        return cls

    return class_decorator


##############################################################################
# Helpers


def _velocity_speed_table_generator():
    '''
    Generates test methods for velocity speed tables.
    '''

    def test(self, cls):
        self.assertTrue(len(cls.tables), 'No velocity speed tables defined.')
        for name in ['v2', 'vref']:
            table = cls.tables.get(name)
            if not table:
                continue
            self.assertTrue('weight' in table, 'Weight not in %s table.' % name)
            self.assertTrue(len(table) > 1, 'No flap/conf rows in %s table.' % name)
            weights = list(table['weight'])
            self.assertEqual(weights, sorted(weights), 'Weight order in %s table.' % name)
            lengths = map(len, table.values())
            self.assertTrue(len(set(lengths)) == 1, 'Length mismatch in %s table.' % name)

    f = lambda x: inspect.isclass(x) \
        and issubclass(x, VelocitySpeed) \
        and not x == VelocitySpeed

    for name, cls in inspect.getmembers(velocity_speed, f):
        yield test, 'velocity_speed_table__%s' % name.lower(), cls


##############################################################################
# Test Cases


class TestVelocitySpeed(unittest.TestCase):

    def setUp(self):
        self.velocity_speed = VelocitySpeed()
        self.velocity_speed.weight_unit = 't'
        self.velocity_speed.tables = {
            'v2': {
                'weight': (100, 110, 120, 130, 140, 150, 160, 170, 180, 190),
                       5: (127, 134, 139, 145, 151, 156, 161, 166, 171, 176),
                      15: (122, 128, 134, 139, 144, 149, 154, 159, 164, 168),
                      20: (118, 124, 129, 134, 140, 144, 149, 154, 159, 164),
            },
            'vref': {
                'weight': (100, 110, 120, 130, 140, 150, 160, 170, 180, 190),
                       5: (114, 121, 128, 134, 141, 147, 153, 158, 164, 169),
                      15: (109, 116, 122, 129, 141, 135, 146, 151, 157, 162),
                      20: (105, 111, 118, 124, 130, 135, 141, 147, 152, 158),
            },
        }

    def test_v2(self):
        self.velocity_speed.interpolate = False
        self.assertEquals(self.velocity_speed.v2(119000, 20), 129)
        self.assertEquals(self.velocity_speed.v2(120000, 20), 129)
        self.assertEquals(self.velocity_speed.v2(121000, 20), 134)
        self.assertRaises(KeyError, self.velocity_speed.v2, 165000, 14)

    def test_v2_interpolated(self):
        self.velocity_speed.interpolate = True
        self.assertEquals(self.velocity_speed.v2(145000, 20), 142)
        self.assertEquals(self.velocity_speed.v2(120000, 20), 129)
        self.assertEquals(self.velocity_speed.v2(165000, 5), 163.5)
        self.assertEquals(self.velocity_speed.v2(94000, 20), None)
        self.assertRaises(KeyError, self.velocity_speed.v2, 165000, 14)

    def test_v2_minimum(self):
        self.velocity_speed.interpolate = True
        self.velocity_speed.minimum_speed = 125
        self.assertEquals(self.velocity_speed.v2(100500, 15), 125)
        self.velocity_speed.interpolate = False
        self.assertEquals(self.velocity_speed.v2(100500, 15), 128)
        self.assertRaises(KeyError, self.velocity_speed.v2, 165000, 14)

    def test_vref(self):
        self.velocity_speed.minimum_speed = False
        self.assertEquals(self.velocity_speed.vref(119000, 15), 122)
        self.assertEquals(self.velocity_speed.vref(120000, 15), 122)
        self.assertEquals(self.velocity_speed.vref(121000, 15), 129)
        self.assertRaises(KeyError, self.velocity_speed.vref, 121000, 14)

    def test_vref_interpolated(self):
        self.velocity_speed.interpolate = True
        self.assertEquals(self.velocity_speed.vref(120000, 5), 128)
        self.assertEquals(self.velocity_speed.vref(120000, 15), 122)
        self.assertEquals(self.velocity_speed.vref(145000, 20), 132.5)
        self.assertEquals(self.velocity_speed.vref(94000, 20), None)
        self.assertRaises(KeyError, self.velocity_speed.vref, 165000, 14)

    def test_vref_minimum(self):
        self.velocity_speed.interpolate = True
        self.velocity_speed.minimum_speed = 115
        self.assertEquals(self.velocity_speed.vref(100500, 15), 115)
        self.velocity_speed.interpolate = False
        self.assertEquals(self.velocity_speed.vref(100500, 15), 116)
        self.assertRaises(KeyError, self.velocity_speed.vref, 165000, 14)


@_generate_tests(_velocity_speed_table_generator)
class TestVelocitySpeedTables(unittest.TestCase):
    pass


##############################################################################
# vim:et:ft=python:nowrap:sts=4:sw=4:ts=4
